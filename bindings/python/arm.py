from cffi import FFI

ffi = FFI()

ffi.cdef("bool adc(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool add(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool and(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool eor(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool orr(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool rsb(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool rsc(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool sbc(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool sub(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool bkpt(void*);")
ffi.cdef("bool b(condition, void*);")
ffi.cdef("bool bic(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool blx(condition, void*);")
ffi.cdef("bool bx(condition, void*);")
ffi.cdef("bool bxj(condition, void*);")
ffi.cdef("bool blxun(void*);")
ffi.cdef("bool cdp(condition, void*);")
ffi.cdef("bool clz(condition, reg, void*);")
ffi.cdef("bool cmn(condition, bool, reg, void*);")
ffi.cdef("bool cmp(condition, bool, reg, void*);")
ffi.cdef("bool cpy(condition, reg, void*);")
ffi.cdef("bool cps(Mode, void*);")
ffi.cdef("bool cpsie(void*);")
ffi.cdef("bool cpsid(void*);")
ffi.cdef("bool cpsie_mode(Mode, void*);")
ffi.cdef("bool cpsid_mode(Mode, void*);")
ffi.cdef("bool ldc(condition, bool, reg, void*);")
ffi.cdef("bool ldm1(condition, bool, reg, void*);")
ffi.cdef("bool ldm2(condition, reg, void*);")
ffi.cdef("bool ldm3(condition, bool, reg, void*);")
ffi.cdef("bool ldr(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool ldrb(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool ldrbt(condition, bool, reg, reg, void*);")
ffi.cdef("bool ldrd(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool ldrex(condition, reg, reg, void*);")
ffi.cdef("bool ldrh(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool ldrsb(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool ldrsh(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool ldrt(condition, bool, reg, reg, void*);")
ffi.cdef("bool mcr(condition, reg, void*);")
ffi.cdef("bool mcrr(condition, reg, reg, void*);")
ffi.cdef("bool mla(condition, bool, reg, reg, void*);")
ffi.cdef("bool mov(condition, bool, bool, reg, void*);")
ffi.cdef("bool mrc(condition, reg, void*);")
ffi.cdef("bool mrrc(condition, reg, reg, void*);")
ffi.cdef("bool mrs(condition, reg, void*);")
ffi.cdef("bool mul(condition, bool, reg, void*);")
ffi.cdef("bool mvn(condition, bool, bool, reg, void*);")
ffi.cdef("bool msr_imm(condition, void*);")
ffi.cdef("bool msr_reg(condition, void*);")
ffi.cdef("bool pkhbt(condition, reg, reg, void*);")
ffi.cdef("bool pkhtb(condition, reg, reg, void*);")
ffi.cdef("bool pld(bool, reg, void*);")
ffi.cdef("bool qadd(condition, reg, reg, void*);")
ffi.cdef("bool qadd16(condition, reg, reg, void*);")
ffi.cdef("bool qadd8(condition, reg, reg, void*);")
ffi.cdef("bool qaddsubx(condition, reg, reg, void*);")
ffi.cdef("bool qdadd(condition, reg, reg, void*);")
ffi.cdef("bool qdsub(condition, reg, reg, void*);")
ffi.cdef("bool qsub(condition, reg, reg, void*);")
ffi.cdef("bool qsub16(condition, reg, reg, void*);")
ffi.cdef("bool qsub8(condition, reg, reg, void*);")
ffi.cdef("bool qsubaddx(condition, reg, reg, void*);")
ffi.cdef("bool rev(condition, reg, void*);")
ffi.cdef("bool rev16(condition, reg, void*);")
ffi.cdef("bool revsh(condition, reg, void*);")
ffi.cdef("bool rfe(bool, reg, void*);")
ffi.cdef("bool sadd16(condition, reg, reg, void*);")
ffi.cdef("bool sadd8(condition, reg, reg, void*);")
ffi.cdef("bool saddsubx(condition, reg, reg, void*);")
ffi.cdef("bool sel(condition, reg, reg, void*);")
ffi.cdef("bool setendbe(void*);")
ffi.cdef("bool setendle(void*);")
ffi.cdef("bool shadd16(condition, reg, reg, void*);")
ffi.cdef("bool shadd8(condition, reg, reg, void*);")
ffi.cdef("bool shaddsubx(condition, reg, reg, void*);")
ffi.cdef("bool shsub16(condition, reg, reg, void*);")
ffi.cdef("bool shsub8(condition, reg, reg, void*);")
ffi.cdef("bool shsubaddx(condition, reg, reg, void*);")
ffi.cdef("bool smlabb(condition, reg, reg, void*);")
ffi.cdef("bool smlabt(condition, reg, reg, void*);")
ffi.cdef("bool smlatb(condition, reg, reg, void*);")
ffi.cdef("bool smlatt(condition, reg, reg, void*);")
ffi.cdef("bool smlad(condition, reg, reg, void*);")
ffi.cdef("bool smlal(condition, bool, void*);")
ffi.cdef("bool smlalbb(condition, void*);")
ffi.cdef("bool smlalbt(condition, void*);")
ffi.cdef("bool smlaltb(condition, void*);")
ffi.cdef("bool smlaltt(condition, void*);")
ffi.cdef("bool smlald(condition, void*);")
ffi.cdef("bool smlawb(condition, reg, reg, void*);")
ffi.cdef("bool smlawt(condition, reg, reg, void*);")
ffi.cdef("bool smlsd(condition, reg, reg, void*);")
ffi.cdef("bool smlsld(condition, void*);")
ffi.cdef("bool smmla(condition, reg, reg, void*);")
ffi.cdef("bool smmls(condition, reg, reg, void*);")
ffi.cdef("bool smmul(condition, reg, void*);")
ffi.cdef("bool smuad(condition, reg, void*);")
ffi.cdef("bool smulbb(condition, reg, void*);")
ffi.cdef("bool smulbt(condition, reg, void*);")
ffi.cdef("bool smultb(condition, reg, void*);")
ffi.cdef("bool smultt(condition, reg, void*);")
ffi.cdef("bool smull(condition, bool, void*);")
ffi.cdef("bool smulwb(condition, reg, void*);")
ffi.cdef("bool smulwt(condition, reg, void*);")
ffi.cdef("bool smusd(condition, reg, void*);")
ffi.cdef("bool srs(bool, Mode, void*);")
ffi.cdef("bool ssat(condition, reg, void*);")
ffi.cdef("bool ssat16(condition, reg, void*);")
ffi.cdef("bool ssub16(condition, reg, reg, void*);")
ffi.cdef("bool ssub8(condition, reg, reg, void*);")
ffi.cdef("bool ssubaddx(condition, reg, reg, void*);")
ffi.cdef("bool stc(condition, bool, reg, void*);")
ffi.cdef("bool stm1(condition, bool, reg, void*);")
ffi.cdef("bool stm2(condition, reg, void*);")
ffi.cdef("bool str(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool strb(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool strbt(condition, bool, reg, reg, void*);")
ffi.cdef("bool strd(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool strex(condition, reg, reg, void*);")
ffi.cdef("bool strh(condition, bool, bool, reg, reg, void*);")
ffi.cdef("bool strt(condition, bool, reg, reg, void*);")
ffi.cdef("bool swi(condition, void*);")
ffi.cdef("bool swp(condition, reg, reg, void*);")
ffi.cdef("bool swpb(condition, reg, reg, void*);")
ffi.cdef("bool sxtab(condition, reg, reg, void*);")
ffi.cdef("bool sxtab16(condition, reg, reg, void*);")
ffi.cdef("bool sxtah(condition, reg, reg, void*);")
ffi.cdef("bool sxtb(condition, reg, void*);")
ffi.cdef("bool sxtb16(condition, reg, void*);")
ffi.cdef("bool sxth(condition, reg, void*);")
ffi.cdef("bool teq(condition, bool, reg, void*);")
ffi.cdef("bool tst(condition, bool, reg, void*);")
ffi.cdef("bool uadd16(condition, reg, reg, void*);")
ffi.cdef("bool uadd8(condition, reg, reg, void*);")
ffi.cdef("bool uaddsubx(condition, reg, reg, void*);")
ffi.cdef("bool uhadd16(condition, reg, reg, void*);")
ffi.cdef("bool uhadd8(condition, reg, reg, void*);")
ffi.cdef("bool uhaddsubx(condition, reg, reg, void*);")
ffi.cdef("bool uhsub16(condition, reg, reg, void*);")
ffi.cdef("bool uhsub8(condition, reg, reg, void*);")
ffi.cdef("bool uhsubaddx(condition, reg, reg, void*);")
ffi.cdef("bool umaal(condition, void*);")
ffi.cdef("bool umlal(condition, bool, void*);")
ffi.cdef("bool umull(condition, bool, void*);")
ffi.cdef("bool uqadd16(condition, reg, reg, void*);")
ffi.cdef("bool uqadd8(condition, reg, reg, void*);")
ffi.cdef("bool uqaddsubx(condition, reg, reg, void*);")
ffi.cdef("bool uqsub16(condition, reg, reg, void*);")
ffi.cdef("bool uqsub8(condition, reg, reg, void*);")
ffi.cdef("bool uqsubaddx(condition, reg, reg, void*);")
ffi.cdef("bool usad8(condition, reg, void*);")
ffi.cdef("bool usada8(condition, reg, reg, void*);")
ffi.cdef("bool usat(condition, reg, void*);")
ffi.cdef("bool usat16(condition, reg, void*);")
ffi.cdef("bool usub16(condition, reg, reg, void*);")
ffi.cdef("bool usub8(condition, reg, reg, void*);")
ffi.cdef("bool usubaddx(condition, reg, reg, void*);")
ffi.cdef("bool uxtab(condition, reg, reg, void*);")
ffi.cdef("bool uxtab16(condition, reg, reg, void*);")
ffi.cdef("bool uxtah(condition, reg, reg, void*);")
ffi.cdef("bool uxtb(condition, reg, void*);")
ffi.cdef("bool uxtb16(condition, reg, void*);")
ffi.cdef("bool uxth(condition, reg, void*);")
